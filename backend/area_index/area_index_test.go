package area_index

import (
	"cleanapp/backend/server/api"
	"fmt"
	"testing"

	geojson "github.com/paulmach/go.geojson"
)

func TestPointToWKT(t *testing.T) {
	testCases := []struct {
		name  string
		input struct {
			lng float64
			lat float64
		}
		expected string
	}{
		{
			name: "Small Polygon",
			input: struct {
				lng float64
				lat float64
			}{
				lng: 8.4367673,
				lat: 40.8457999,
			},
			expected: "POINT(40.8457999 8.4367673)",
		},
	}

	for _, testCase := range testCases {
		wkt := PointToWKT(testCase.input.lng, testCase.input.lat)
		if wkt != testCase.expected {
			t.Errorf("%s: Failure in getting point WKT; got: %v, want: %v", testCase.name, wkt, testCase.expected)
		}
	}
}

func TestViewPortToWKT(t *testing.T) {
	testCases := []struct {
		name     string
		input    *api.ViewPort
		expected string
	}{
		{
			name: "Standard Viewport",
			input: &api.ViewPort{
				LatMin: 47.3561236,
				LonMin: 8.4924316,
				LatMax: 47.3735062,
				LonMax: 8.5238456,
			},
			expected: "POLYGON((47.3561236 8.4924316,47.3561236 8.5238456,47.3735062 8.5238456,47.3735062 8.4924316,47.3561236 8.4924316))",
		}, {
			name: "Second Viewport",
			input: &api.ViewPort{
				LatMin: 47.32049780635907,
				LonMin: 8.528003096580507,
				LatMax: 47.32267240135444,
				LonMax: 8.53192985057831,
			},
			expected: "POLYGON((47.32049780635907 8.528003096580507,47.32049780635907 8.53192985057831,47.32267240135444 8.53192985057831,47.32267240135444 8.528003096580507,47.32049780635907 8.528003096580507))",
		},
	}

	for _, testCase := range testCases {
		wkt := ViewPortToWKT(testCase.input)
		if wkt != testCase.expected {
			t.Errorf("%s: Failure in getting viewport WKT; got: %v, want: %v", testCase.name, wkt, testCase.expected)
		}
	}
}

func TestPolygonToWKT(t *testing.T) {
	testCases := []struct {
		name     string
		input    *api.Area
		expected struct {
			wkt string
			err error
		}
	}{
		{
			name: "Small Polygon",
			input: &api.Area{
				Coordinates: &geojson.Feature{
					Geometry: &geojson.Geometry{
						Type: "Polygon",
						Polygon: [][][]float64{
							{
								{175.4527356, -41.2149372},
								{175.4525347, -41.2147901},
								{175.4523615, -41.2146843},
								{175.450895, -41.2154755},
								{175.4517529, -41.2163586},
								{175.4522375, -41.2160895},
								{175.4519603, -41.2162412},
								{175.4522983, -41.2160563},
								{175.4524341, -41.2159776},
								{175.4518662, -41.2154027},
								{175.4527356, -41.2149372},
							},
						},
					},
				},
			},
			expected: struct {
				wkt string
				err error
			}{
				wkt: "POLYGON((-41.2149372 175.4527356,-41.2147901 175.4525347,-41.2146843 175.4523615,-41.2154755 175.450895,-41.2163586 175.4517529,-41.2160895 175.4522375,-41.2162412 175.4519603,-41.2160563 175.4522983,-41.2159776 175.4524341,-41.2154027 175.4518662,-41.2149372 175.4527356))",
				err: nil,
			},
		}, {
			name: "MultiLoop Polygon",
			input: &api.Area{
				Coordinates: &geojson.Feature{
					Geometry: &geojson.Geometry{
						Type: "Polygon",
						Polygon: [][][]float64{
							{
								{8.7158997, 47.4649283},
								{8.7158624, 47.4649322},
								{8.7158253, 47.4649369},
								{8.7158714, 47.4648476},
								{8.7158844, 47.464878},
								{8.7158919, 47.4649007},
								{8.7158997, 47.4649283},
							}, {
								{8.711023, 47.4602762},
								{8.711417, 47.4602589},
								{8.7114627, 47.4602254},
								{8.7115895, 47.4601629},
								{8.7109647, 47.4602065},
								{8.711023, 47.4602762},
							}, {
								{8.7118526, 47.4629653},
								{8.7118321, 47.4629739},
								{8.7118179, 47.4629828},
								{8.7118074, 47.4629919},
								{8.7119394, 47.4629609},
								{8.7119235, 47.4629581},
								{8.7119062, 47.4629565},
								{8.7118894, 47.462957},
								{8.7118735, 47.4629588},
								{8.7118526, 47.4629653},
							}, {
								{8.7105784, 47.4638352},
								{8.7105778, 47.4638584},
								{8.7105824, 47.4638783},
								{8.7105875, 47.4638925},
								{8.7105862, 47.4638088},
								{8.7105784, 47.4638352},
							}, {
								{8.7111412, 47.4616485},
								{8.7111203, 47.4616448},
								{8.7110983, 47.4616448},
								{8.7110766, 47.4616479},
								{8.7110548, 47.4616535},
								{8.7111743, 47.4616618},
								{8.7111597, 47.4616544},
								{8.7111412, 47.4616485},
							}, {
								{8.7122805, 47.4601831},
								{8.7122636, 47.4601809},
								{8.7122561, 47.4601819},
								{8.7122481, 47.4601844},
								{8.7123238, 47.4602082},
								{8.7123242, 47.4602031},
								{8.7123228, 47.4601987},
								{8.7123195, 47.4601946},
								{8.7123003, 47.4601876},
								{8.7122805, 47.4601831},
							}, {
								{8.7101962, 47.4635439},
								{8.7101827, 47.4635474},
								{8.7101727, 47.4635511},
								{8.7102353, 47.4635438},
								{8.7102245, 47.4635427},
								{8.710211, 47.4635422},
								{8.7101962, 47.4635439},
							}, {
								{8.7142705, 47.4634494},
								{8.7143643, 47.4634187},
								{8.714402, 47.4635149},
								{8.7144547, 47.463662},
								{8.7150695, 47.4635992},
								{8.7151712, 47.4635895},
								{8.7134801, 47.4630226},
								{8.7135155, 47.4630684},
								{8.7135913, 47.4631559},
								{8.7136779, 47.463258},
								{8.7137798, 47.4635555},
								{8.7141512, 47.4634968},
								{8.7142705, 47.4634494},
							},
						},
					},
				},
			},
			expected: struct {
				wkt string
				err error
			}{
				wkt: "POLYGON((47.4649283 8.7158997,47.4649322 8.7158624,47.4649369 8.7158253,47.4648476 8.7158714,47.464878 8.7158844,47.4649007 8.7158919,47.4649283 8.7158997),(47.4602762 8.711023,47.4602589 8.711417,47.4602254 8.7114627,47.4601629 8.7115895,47.4602065 8.7109647,47.4602762 8.711023),(47.4629653 8.7118526,47.4629739 8.7118321,47.4629828 8.7118179,47.4629919 8.7118074,47.4629609 8.7119394,47.4629581 8.7119235,47.4629565 8.7119062,47.462957 8.7118894,47.4629588 8.7118735,47.4629653 8.7118526),(47.4638352 8.7105784,47.4638584 8.7105778,47.4638783 8.7105824,47.4638925 8.7105875,47.4638088 8.7105862,47.4638352 8.7105784),(47.4616485 8.7111412,47.4616448 8.7111203,47.4616448 8.7110983,47.4616479 8.7110766,47.4616535 8.7110548,47.4616618 8.7111743,47.4616544 8.7111597,47.4616485 8.7111412),(47.4601831 8.7122805,47.4601809 8.7122636,47.4601819 8.7122561,47.4601844 8.7122481,47.4602082 8.7123238,47.4602031 8.7123242,47.4601987 8.7123228,47.4601946 8.7123195,47.4601876 8.7123003,47.4601831 8.7122805),(47.4635439 8.7101962,47.4635474 8.7101827,47.4635511 8.7101727,47.4635438 8.7102353,47.4635427 8.7102245,47.4635422 8.710211,47.4635439 8.7101962),(47.4634494 8.7142705,47.4634187 8.7143643,47.4635149 8.714402,47.463662 8.7144547,47.4635992 8.7150695,47.4635895 8.7151712,47.4630226 8.7134801,47.4630684 8.7135155,47.4631559 8.7135913,47.463258 8.7136779,47.4635555 8.7137798,47.4634968 8.7141512,47.4634494 8.7142705))",
				err: nil,
			},
		}, {
			name: "Multi Polygon",
			input: &api.Area{
				Coordinates: &geojson.Feature{
					Geometry: &geojson.Geometry{
						Type: "MultiPolygon",
						MultiPolygon: [][][][]float64{
							{
								{
									{8.7142705, 47.4634494},
									{8.7143643, 47.4634187},
									{8.714402, 47.4635149},
									{8.7144547, 47.463662},
									{8.7150695, 47.4635992},
									{8.7151712, 47.4635895},
									{8.7134801, 47.4630226},
									{8.7135155, 47.4630684},
									{8.7135913, 47.4631559},
									{8.7136779, 47.463258},
									{8.7137798, 47.4635555},
									{8.7141512, 47.4634968},
									{8.7142705, 47.4634494},
								}, {
									{8.7101962, 47.4635439},
									{8.7101827, 47.4635474},
									{8.7101727, 47.4635511},
									{8.7102353, 47.4635438},
									{8.7102245, 47.4635427},
									{8.710211, 47.4635422},
									{8.7101962, 47.4635439},
								},
							}, {
								{
									{8.7158997, 47.4649283},
									{8.7158624, 47.4649322},
									{8.7158253, 47.4649369},
									{8.7158714, 47.4648476},
									{8.7158844, 47.464878},
									{8.7158919, 47.4649007},
									{8.7158997, 47.4649283},
								}, {
									{8.711023, 47.4602762},
									{8.711417, 47.4602589},
									{8.7114627, 47.4602254},
									{8.7115895, 47.4601629},
									{8.7109647, 47.4602065},
									{8.711023, 47.4602762},
								},
							},
						},
					},
				},
			},
			expected: struct {
				wkt string
				err error
			}{
				wkt: "MULTIPOLYGON(((47.4634494 8.7142705,47.4634187 8.7143643,47.4635149 8.714402,47.463662 8.7144547,47.4635992 8.7150695,47.4635895 8.7151712,47.4630226 8.7134801,47.4630684 8.7135155,47.4631559 8.7135913,47.463258 8.7136779,47.4635555 8.7137798,47.4634968 8.7141512,47.4634494 8.7142705),(47.4635439 8.7101962,47.4635474 8.7101827,47.4635511 8.7101727,47.4635438 8.7102353,47.4635427 8.7102245,47.4635422 8.710211,47.4635439 8.7101962)),((47.4649283 8.7158997,47.4649322 8.7158624,47.4649369 8.7158253,47.4648476 8.7158714,47.464878 8.7158844,47.4649007 8.7158919,47.4649283 8.7158997),(47.4602762 8.711023,47.4602589 8.711417,47.4602254 8.7114627,47.4601629 8.7115895,47.4602065 8.7109647,47.4602762 8.711023)))",
				err: fmt.Errorf("expected error"),
			},
		},
	}

	for _, testCase := range testCases {
		wkt, err := AreaToWKT(testCase.input)
		if wkt != testCase.expected.wkt {
			t.Errorf(
				"%s: Failure in getting the area index; got: %v %v, want: %v %v",
				testCase.name, wkt, err, testCase.expected.wkt, testCase.expected.err,
			)
		}
	}
}
